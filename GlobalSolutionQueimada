from os import system
import random
import os
import json
import time
import requests 
from datetime import datetime
from threading import Thread


global login_status
login_status = False  # Variável global para controlar o status de login


def carregar_dados(arquivo: json) -> dict:
    '''
    Carrega os dados de um arquivo JSON e retorna um dicionário.
    Complexidade: O(n)
    '''
    if os.path.exists(arquivo):
        with open(arquivo, 'r', encoding='utf-8') as file:
            try:
                conteudo = file.read().strip()
                if not conteudo:
                    return {}  # Arquivo está vazio
                return json.loads(conteudo)
            except json.JSONDecodeError:
                print(f"Erro ao ler o arquivo {arquivo}. Formato inválido.")
                return {}
    return {}


def salvar_dados(dados: dict, arquivo: json) -> None:
    '''
    Salva os dados em um arquivo JSON.
    Complexidade: O(n)
    '''
    with open(arquivo, 'w', encoding='utf-8') as file:
        json.dump(dados, file, indent=4)

def usuario_id(dados: dict) -> str:
    '''
    Gera um ID único para o usuário.
    Complexidade: O(n)
    '''
    id_usuario = str(random.randint(1000, 9999))
    while id_usuario in dados:
        id_usuario = str(random.randint(1000, 9999))
    return id_usuario


def cadastro_usuario() -> None:
    '''
    Cadastro de usuário com nome e senha.
    Complexidade: O(1) para inserção + O(n) para verificação opcional de duplicata
    Retorno: None
    '''
    global login_status
    print("Cadastro de Usuário")
    if not login_status:
        nome = input("Digite o nome do usuário: ").strip().title()

        while True:
            senha = input("Digite a senha do usuário (mínimo 8 caracteres): ")
            if len(senha) < 8:
                print("A senha deve ter pelo menos 8 caracteres.")
            else:
                break


        usuarios = carregar_dados('usuarios.json')
        

        # Verifica se o nome de usuário já existe
        for user in usuarios.values():
            if user['nome'] == nome:
                print("Usuário já existe. Escolha outro nome.")
                return

        id_usuario = usuario_id(usuarios)
        usuarios[id_usuario] = {
            'nome': nome,
            'senha': senha
        }
        salvar_dados(usuarios, 'usuarios.json')
        login_status = True
        print(f"Usuário {nome} cadastrado com sucesso!")
    else:
        print("Você já está logado. Reinicie o programa para cadastrar outro usuário.")


def login_usuario() -> None:
    '''
    Login de usuário validando nome e senha.
    Complexidade: O(n)
    '''
    global login_status
    print("Login de Usuário")
    if not login_status:
        nome = input("Digite o nome do usuário: ").strip().title()
        senha = input("Digite a senha do usuário: ")

        usuarios = carregar_dados('usuarios.json')
        if not usuarios:
            print("Nenhum usuário cadastrado ainda.")
            return

        for usuario in usuarios.values():
            if usuario['nome'] == nome and usuario['senha'] == senha:
                print(f"Login realizado com sucesso! Bem-vindo, {nome}.")
                login_status = True
                return

        print("Nome de usuário ou senha incorretos.")
    else:
        print("Você já está logado.")


def ocorrencia_aleatoria() -> None:
    '''
    Gera uma ocorrência aleatória baseada na API do IBGE.
    Complexidade: O(n)
    '''
    try:
        response = requests.get("https://servicodados.ibge.gov.br/api/v1/localidades/municipios")
        if response.status_code == 200:
            municipios = response.json()
            cidade_aleatoria = random.choice(municipios)
            nome_cidade = cidade_aleatoria['nome']
            uf = cidade_aleatoria['microrregiao']['mesorregiao']['UF']['sigla']
            local = f"{nome_cidade}/{uf}"
            
            data = datetime.now().strftime("%d/%m/%Y")
            nivel_de_perigo = random.randint(1, 5)
            
            nova_ocorrencia = {
                'local': local,
                'data': data,
                'nivel_de_perigo': nivel_de_perigo
            }

            notificacoes = carregar_dados('notificacoes.json')
            ocorrencias = carregar_dados('ocorrencias.json')
            id_ocorrencia = str(random.randint(1000, 9999))
            while id_ocorrencia in notificacoes:
                id_ocorrencia = str(random.randint(1000, 9999))
            if nivel_de_perigo >= 4:
                notificacoes[id_ocorrencia] = nova_ocorrencia
            ocorrencias[id_ocorrencia] = nova_ocorrencia
            salvar_dados(ocorrencias, 'ocorrencias.json')
            salvar_dados(notificacoes, 'notificacoes.json')
    except Exception as e:
        print(f"Erro ao gerar ocorrência: {e}")


def loop_ocorrencia_aleatoria() -> None:
    '''
    Loop que gera ocorrências aleatórias a cada 3 segundos.
    '''
    while True:
        ocorrencia_aleatoria()
        time.sleep(3)


def cadastrar_ocorrencia() -> None:
    '''
    Cadastro manual de ocorrência.
    Complexidade: O(n)
    '''
    print("Cadastro de Ocorrência")
    if  login_status:
        local = input("Digite o local da ocorrência: ").strip().title()
        data = datetime.now().strftime("%d/%m/%Y")
        nivel_de_perigo = random.randint(1, 5)
        
        ocorrencias = carregar_dados('ocorrencias.json')
        nova_ocorrencia = {
            'local': local,
            'data': data,
            'nivel_de_perigo': nivel_de_perigo
        }
        ocorrencias[str(random.randint(1000, 9999))] = nova_ocorrencia
        salvar_dados(ocorrencias, 'ocorrencias.json')
        print(f"Ocorrência cadastrada com sucesso no local {local} com nível {nivel_de_perigo}.")
    else:
        print("Você não está logado.")


def checar_ocorrencias(arquivo: json) -> None:
    '''
    Exibe todas as ocorrências salvas.
    Complexidade: O(n)
    '''
    print("Verificação de Ocorrências")
    ocorrencias = carregar_dados(arquivo)
    if not ocorrencias:
        print("Nenhuma ocorrência cadastrada.")
    else:
        for id, ocorrencia in ocorrencias.items():
            print('-' * 30)
            print(f"ID: {id}")
            print(f"Local: {ocorrencia['local']}")
            print(f"Data: {ocorrencia['data']}")
            print(f"Nível de Perigo: {ocorrencia['nivel_de_perigo']}")
            print('-' * 30)
    
    # Se for o arquivo de notificações, limpamos após exibição
    if arquivo == 'notificacoes.json':
        salvar_dados({}, 'notificacoes.json')
        print("\n✅ Todas as notificações foram limpas após a visualização.")   

    input("Pressione Enter para voltar ao menu...") #Em vez de time.sleep, usamos input para esperar o usuário ler as ocorrências no seu tempo


def busca_binaria(ocorrencias: list, nivel_alvo: int) -> int:
    '''
    Busca binária por nível de perigo.
    Complexidade: O(log n)
    '''
    esquerda = 0
    direita = len(ocorrencias) - 1

    while esquerda <= direita:
        meio = (esquerda + direita) // 2
        _, dados = ocorrencias[meio]
        nivel = dados['nivel_de_perigo']
        
        if nivel == nivel_alvo:
            return meio
        elif nivel < nivel_alvo:
            esquerda = meio + 1
        else:
            direita = meio - 1
    return -1


def notificacao_usuario() -> None:
    '''
    Notifica usuário sobre ocorrências de níveis máximo.
    Complexidade: O(n log n)
    '''
    limpar_tela()
    ocorrencias = carregar_dados('notificacoes.json')
    if not ocorrencias:
        return

    ocorrencias_ordenadas = sorted(
        ocorrencias.items(), 
        key=lambda item: item[1]['nivel_de_perigo']
    )

    index = busca_binaria(ocorrencias_ordenadas, 5)

    if index != -1:
        chave, ocorrencia = ocorrencias_ordenadas[index]
        print(f"\n[ALERTA MÁXIMO] Ocorrência perigosa detectada!")
        print(f"Local: {ocorrencia['local']}")
        print(f"Data: {ocorrencia['data']}")
        print(f"Nível de Perigo: {ocorrencia['nivel_de_perigo']}\n")

        ocorrencias.pop(chave)
        salvar_dados(ocorrencias, 'notificacoes.json')
        time.sleep(5)  # Pausa para visualização da notificação
        limpar_tela()

def mostrar_sobre_sistema():
    texto = """
    Sobre o Sistema:

    Este aplicativo foi desenvolvido por três colaboradores: Fernando Carlos, Pedro Henrique Silva Batista e Juan Fuentes Rufino.

    O objetivo principal do sistema é propor uma solução tecnológica frente ao crescente aumento dos focos de queimada sem causas aparentes. 
    Após extensas análises de dados globais relacionados a incêndios florestais — com base em um conjunto de dados robusto contendo mais de um milhão de amostras — 
    foi possível identificar dois pontos críticos:

    1. Um aumento expressivo nas queimadas provocadas por ação humana, porém sem justificativa clara;
    2. Os impactos diretos dessas ocorrências não apenas sobre o meio ambiente, mas também sobre a saúde da população.

    Diante desse cenário, desenvolvemos um aplicativo que visa integrar e proteger as comunidades que vivem próximas a regiões afetadas. 
    Entre suas principais funcionalidades, destacam-se:

    - Notificação em tempo real de áreas com risco iminente de incêndio;
    - Uma aba social para que usuários possam registrar ou consultar ocorrências;
    - Acesso a todas as notificações e registros públicos feitos pela comunidade.

    Além disso, os dados inseridos pelos próprios usuários auxiliam no aprimoramento dos sensores, enriquecem a base de dados e fortalecem a 
    aplicação de modelos preditivos. Dessa forma, o sistema contribui significativamente tanto para a prevenção de desastres quanto para a preservação ambiental e o bem-estar coletivo.
    """
    print(texto)


def limpar_tela() -> None:
    '''
    Limpa a tela do terminal.
    '''
    os.system('cls' if os.name == 'nt' else 'clear')


def menu() -> None:
    '''
    Menu principal do sistema com interface mais amigável.
    '''
    global login_status
    while True:
        time.sleep(2) # Pausa para visualização da tela anterior
        if login_status:
            notificacao_usuario()       
        limpar_tela()
        print("="*50)
        print("        🛡️  SISTEMA DE OCORRÊNCIAS AO VIVO 🛡️")
        print("="*50)
        print("Bem-vindo! Escolha uma das opções abaixo:\n")
        print("1. 👤 Cadastrar Usuário")
        print("   ➤ Crie um novo usuário para acessar o sistema.\n")
        print("2. 🔐 Login de Usuário")
        print("   ➤ Acesse sua conta com nome e senha.\n")
        print("3. 📝 Cadastrar Ocorrência")
        print("   ➤ Registre manualmente uma nova ocorrência.\n")
        print("4. 📂 Verificar Ocorrências")
        print("   ➤ Veja todas as ocorrências registradas.\n")
        print("5. 🚨 Notificações de Perigo")
        print("   ➤ Consulte apenas as ocorrências perigosas (nível 4 ou 5).\n")
        print("6. ℹ️ Para saber mais sobre o app")
        print("   ➤ Informações sobre o sistema e seus objetivos.\n")
        print("7. ❌ Sair do Sistema")
        print("   ➤ Finaliza a execução do programa.\n")
        print("-"*50)
        
        escolha = input("Digite o número da opção desejada: ").strip()
        print()  # Espaço visual

        match escolha:
            case '1':
                cadastro_usuario()
            case '2':
                login_usuario()
            case '3':
                cadastrar_ocorrencia()
            case '4':
                if login_status:
                    checar_ocorrencias('ocorrencias.json')
                else:
                    print("Você precisa estar logado para verificar ocorrências.")
            case '5':
                if login_status:
                    checar_ocorrencias('notificacoes.json')
                else:
                    print("Você precisa estar logado para verificar notificações.")
            case '6':
                print("penis")
            case '7':
                print("Encerrando o sistema... Até logo!")
                break
            case _:
                print("⚠️ Opção inválida. Tente novamente.")
                time.sleep(2)



if __name__ == "__main__":
    # Inicia thread para gerar ocorrências em tempo real
    thread = Thread(target=loop_ocorrencia_aleatoria, daemon=True)
    thread.start()

    # Inicia o menu
    menu()
