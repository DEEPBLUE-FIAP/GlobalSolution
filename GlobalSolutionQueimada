from os import system
import random
import os
import json
import time
import requests #necessário para acessar a API do IBGE, instalar com `pip install requests`
from datetime import datetime

global login_status
login_status = False  # Variável global para controlar o status de login

def carregar_dados(arquivo: json) -> dict:
    '''Carrega os dados de um arquivo JSON e retorna um dicionário.'''
    if os.path.exists(arquivo):
        with open(arquivo, 'r', encoding='utf-8') as file:
            try:
                conteudo = file.read().strip()
                if not conteudo:
                    return {}  # Arquivo está vazio
                return json.loads(conteudo)
            except json.JSONDecodeError:
                print(f"Erro ao ler o arquivo {arquivo}. Formato inválido.")
                return {}
    return {}

def salvar_dados(dados: dict, arquivo: json):
    '''Salva os dados em um arquivo JSON, solicitando como parâmetro o arquivo
    e o dicionário a ser salvo.'''
    with open(arquivo, 'w', encoding='utf-8') as file:
        json.dump(dados, file, indent=4)

def cadastro_usuario():
    global login_status
    '''Cadastro de Usuário que pede nome e senha, validando a senha.'''
    print("Cadastro de Usuário")
    if not login_status:
        nome = input("Digite o nome do usuário: ").strip().title()

        while True:
            senha = input("Digite a senha do usuário: ")
            if len(senha) < 8:
                print("A senha deve ter pelo menos 8 caracteres.")
                os.system('cls' if os.name == 'nt' else 'clear')
            else:
                break

        usuario = {
            'nome': nome,
            'senha': senha
        }
        login_status = True  # Atualiza o status de login para True
        salvar_dados(usuario, 'usuarios.json')  # sobrescreve tudo com esse novo dicionário
        print(f"Usuário {nome} cadastrado com sucesso!")
    else:
        print("Você já está logado. Faça logout para cadastrar um novo usuário.")
        print("Para fazer logout, reinicie o programa.")

def login_usuario():
    global login_status
    '''Login de Usuário que pede nome e senha, validando se o usuário existe.'''
    print("Login de Usuário")
    if not login_status:
        nome = input("Digite o nome do usuário: ").strip().title()
        senha = input("Digite a senha do usuário: ")

        usuarios = carregar_dados('usuarios.json') or []  # se carregar_dados retornar None ou {}, vira []

        for usuario in usuarios:
            if 'nome' in usuario and 'senha' in usuario:
                if usuario['nome'] == nome and usuario['senha'] == senha:
                    print(f"Login realizado com sucesso! Bem-vindo, {nome}.")
                    login_status = True  # Atualiza o status de login para True
                    return

        print("Nome de usuário ou senha incorretos.")
    else:
        print("Você já está logado.")
        print("Para fazer logout, reinicie o programa.")

def ocorrencia_aleatoria():
    '''Gera uma ocorrência aleatória e salva em notificacoes.json'''
    try:
        response = requests.get("https://servicodados.ibge.gov.br/api/v1/localidades/municipios")
        if response.status_code == 200:
            municipios = response.json()
            cidade_aleatoria = random.choice(municipios)
            nome_cidade = cidade_aleatoria['nome']
            uf = cidade_aleatoria['microrregiao']['mesorregiao']['UF']['sigla']
            local = f"{nome_cidade}/{uf}"
            
            data = datetime.now().strftime("%d/%m/%Y")
            nivel_perigosidade = random.randint(1, 5)
            
            nova_ocorrencia = {
                'local': local,
                'data': data,
                'nivel_perigosidade': nivel_perigosidade
            }

            notificacoes = carregar_dados('notificacoes.json')
            ocorrencias = carregar_dados('ocorrencias.json')
            id_ocorrencia = str(random.randint(1000, 9999))
            while id_ocorrencia in notificacoes:
                id_ocorrencia = str(random.randint(1000, 9999))

            notificacoes[id_ocorrencia] = nova_ocorrencia
            ocorrencias[id_ocorrencia] = nova_ocorrencia
            salvar_dados(ocorrencias, 'ocorrencias.json')
            salvar_dados(notificacoes, 'notificacoes.json')
        else:
            print("Erro ao acessar API do IBGE.")
    except Exception as e:
        print(f"Erro ao gerar ocorrência: {e}")
     
def cadastrar_ocorrencia():
    '''Cadastro de Ocorrência que pede local, data e gera um nível de perigosidade aleatório.'''
    print("Cadastro de Ocorrência")
    if not login_status:
        local = input("Digite o local da ocorrência: ").strip().title()
        data = input("Digite a data da ocorrência (DD/MM/AAAA): ").strip()
        nivel_perigosidade = random.randint(1, 5)
        
        ocorrencias = carregar_dados('ocorrencias.json')
        nova_ocorrencia = {
            'local': local,
            'data': data,
            'nivel_perigosidade': nivel_perigosidade
        }
        ocorrencias[str(random.randint(1000, 9999))] = nova_ocorrencia
        salvar_dados(ocorrencias, 'ocorrencias.json')
        print(f"Ocorrência cadastrada com sucesso no local {local} com nível de perigosidade {nivel_perigosidade}.")
    else:
        print("Você já está logado. Faça logout para cadastrar uma nova ocorrência.")

def checar_ocorrencias():
    '''Verifica as ocorrências cadastradas, mostrando local, data e nível de perigosidade.'''
    print("Verificação de Ocorrências")
    ocorrencias = carregar_dados('ocorrencias.json')
    if not ocorrencias:
        print("Nenhuma ocorrência cadastrada.")
    else:
        for id, ocorrencia in ocorrencias.items():
            print('-' * 30)
            print(f"ID: {id}")
            print(f"Local: {ocorrencia['local']}")
            print(f"Data: {ocorrencia['data']}")
            print(f"Nível de Perigosidade: {ocorrencia['nivel_perigosidade']}")
            print('-' * 30)

def busca_binaria(ocorrencias, nivel_alvo):
    esquerda = 0
    direita = len(ocorrencias) - 1

    while esquerda <= direita:
        meio = (esquerda + direita) // 2
        _, dados = ocorrencias[meio]  # acessa a tupla (id, dados)
        nivel = dados['nivel_perigosidade']
        
        if nivel == nivel_alvo:
            return meio  # Retorna o índice da ocorrência
        elif nivel < nivel_alvo:
            esquerda = meio + 1
        else:
            direita = meio - 1
    return -1

def notificacao_usuario():
    '''Função que serve para notificar o usuário sobre as ocorrências mais perigosas.'''
    ocorrencias = carregar_dados('notificacoes.json')
    if not ocorrencias:
        print("Nenhuma ocorrência cadastrada.")
        time.sleep(5)

        
    # Transformar em lista de tuplas (id, ocorrencia), para manter referência à chave
    ocorrencias_ordenadas = sorted(
        ocorrencias.items(), 
        key=lambda item: item[1]['nivel_perigosidade']
    )

    nivel_desejado = 5  # nível mais perigoso

    # Busca binária adaptada para lista de tuplas
    index = busca_binaria(ocorrencias_ordenadas, nivel_desejado)

    if index != -1:
        chave, ocorrencia = ocorrencias_ordenadas[index]
        print(f"[ALERTA MÁXIMO] Ocorrência perigosa detectada!")
        print(f"Local: {ocorrencia['local']}")
        print(f"Data: {ocorrencia['data']}")
        print(f"Nível de Perigosidade: {ocorrencia['nivel_perigosidade']}")

        # Remover a ocorrência do dicionário original
        ocorrencias.pop(chave)

        # Salvar dados atualizados no arquivo
        salvar_dados(ocorrencias, 'notificacoes.json')

    else:
        print(f"Nenhuma ocorrência com nível {nivel_desejado} encontrada.")
        
    print("Aguardando nova verificação...\n")
    time.sleep(5)

def menu():
    usuarios = carregar_dados('usuarios.json')
    while True:
        ocorrencia_aleatoria()  #Gera uma ocorrência aleatória a cada iteração
        notificacao_usuario()  #sistema de notificação
        print("\nMenu Principal")
        print("1. Cadastrar Usuário")
        print("2. Login de Usuário")
        print("3. Cadastrar Ocorrência")
        print("4. Verificar Ocorrências")
        print("5. Sair")
        
        escolha = input("Escolha uma opção: ")
        match escolha:
            case '1':
                cadastro_usuario()
            case '2':
                login_usuario()
            case '3':
                cadastrar_ocorrencia()
            case '4':
                checar_ocorrencias()
            case '5':
                print("Saindo do sistema...")
                break
            case _:
                print("Opção inválida, tente novamente.")

if __name__ == "__main__":
    menu()
